PyHSPF, Version 0.1.0
last updated: 01/20/2014
Developed by David J. Lampert and May M. Wu, Argonne National Laboratory

Summary: PyHSPF contains a library of subroutines to run the Hydrological 
Simulation Program in Fortran (HSPF), Version 12.2, Python extensions to 
the HSPF library, and a series of classes for building input files, 
performing simulations, and postprocessing simulation results.  

HSPF requires flowline and catchment data for a stream network, land use 
data for the stream reach subbasins, time series data of climate 
parameters, and hydrology parameters for each land use category/subbasin.  
These data sources (with the exception of the hydrology parameters) can be 
supplied externally as needed (e.g., using Python extensions for 
geographic information systems (GIS) software). Alternatively, a 
series of preprocessing classes and routines were developed based on 
flowline and catchment data from the National Hydrography Dataset 
Version 2 (NHDPlus), climate data from the National Climate Data Center, 
and landuse data from the National Agricultural Statistics Service (NASS)
Cropland Data Layer (CDL). The preprocessing routines require GDAL, Pyshp,
and Pillow in addition to NumPy, Scipy, and Matplotlib, and make a series
of specific assumptions about the data. For more info contact me.

PyHSPF can be used to assimilate the data into an HSPF model, build the 
HSPF input files, simulate the model over a period of time, and then 
provide statistics and plots of the simulation output. The "core" module 
requires numpy, scipy, and matplotlib and can be used for generating input 
files. A series of examples are provided (independently) to illustrate 
PyHSPF core module usage.

The preprocessing modules contain a powerful calculator to automate extraction
of climate data from various databases including the National Solar Radiation
Database (NSRDB), Global Historical Climate Network Daily (GHCND), Global 
Summary of the Day (GSOD), and the Hourly Precipitation Database 3240. The
Preprocessing modules can calculate daily or hourly potential 
evapotranspiration time series using the ASCE Penman-Monteith Equation.

Core Dependencies: 
Python Programming Language Version 3
Numeric Python (NumPy)
Scientific Python (SciPy)
Matplotlib

Preprocessing and Calibration Dependencies:
Geospatial Data Abstract Library (GDAL)
Python Shapefile Library (pyshp)
Python Imaging Library (Pillow)
7-zip (Windows only)

Installation: Extract the source zip files, then open a command prompt,
navigate to the PyHSPF directory, and run "python setup.py install." 
I am providing a few pre-built distributions in addition, but I have 
had trouble porting these to different machines. The binaries can be 
rebuilt using the open source GNU compiler collection (other compilers 
may work but are untested). Assuming gfortran and gcc are available 
as environment variables, the HSPF library can be rebuilt by navigating
as before, running "python setup.py build," and then 
"python setup.py install." Contact me if you have trouble installing.

Testing: Open the python interpreter (from a command prompt simply type 
"python"). Then try "import pyhspf"; the base Fortran subroutines can be
accessed from pyhspf.hspf. If the import succeeds, then try to run 
pyhspf.hspf.sydatepy(), which should print the date as a tuple. There 
are five examples scipts provided in the "examples.zip" file. Each 
example contains a detailed explanation of about the particular HSPF model 
used and how to build the model with PyHSPF.

Acknowledgements: Developed with funding from the United States Department of 
Energy, Energy Efficiency & Renewable Energy, Bioenergy Technologies Office
(BETO). The sponsor in no way endorses this program.

Other Related Pages:
WATER (water analysis tool for energy resources) http://water.es.anl.gov/
Bioenergy KDF https://bioenergykdf.net/
